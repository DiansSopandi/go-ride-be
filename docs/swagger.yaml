definitions:
  dto.RoleCreateRequest:
    properties:
      description:
        example: user
        type: string
      name:
        example: user
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        example: Q2Sb9@example.com
        type: string
      password:
        example: Cilok99!@
        type: string
      roles:
        description: multiple roles
        example:
        - admin
        - driver
        - user
        - superadmin
        items:
          type: string
        type: array
      username:
        example: John Doe
        type: string
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        example: Q2Sb9@example.com
        type: string
      password:
        example: Pass123!@
        type: string
    required:
    - email
    - password
    type: object
  dto.UserLoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        example: Q2Sb9@example.com
        type: string
      password:
        example: Cilok99!@
        minLength: 8
        type: string
      password_confirm:
        example: Cilok99!@
        type: string
      roles:
        example:
        - user
        items:
          type: string
        type: array
      username:
        example: John Doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - password_confirm
    - roles
    - username
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        description: IsActive    bool       `json:"is_active" db:"is_active"`
        type: string
      deleted_at:
        description: Optional, for soft delete
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        description: |-
          Roles    string `json:"role" db:"role"` // e.g., "user", "driver", "admin"
          AvatarUrl  sql.NullString `json:"avatar_url" db:"avatar_url"`
          AvatarName sql.NullString `json:"avatar_name" db:"avatar_name"`
          FirstName  sql.NullString `json:"first_name" db:"first_name"`
          LastName   sql.NullString `json:"last_name" db:"last_name"`
          Phone      sql.NullString `json:"phone" db:"phone"`
          Address    sql.NullString `json:"address" db:"address"`
        type: string
      deleted_at:
        description: Optional, for soft delete
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      picture:
        description: URL to the user's profile picture
        type: string
      provider:
        description: e.g., "google", "local"
        type: string
      provider_id:
        description: ID from the provider (e.g., Google ID)
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: GoRide API
  version: "1.0"
paths:
  /v1:
    get:
      description: This root route returns a simple JSON response
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Root Endpoint
      tags:
      - Root
  /v1/auth/google/callback:
    get:
      description: Handles Google OAuth2 callback
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Google Callback
      tags:
      - Auth
  /v1/auth/google/login:
    get:
      description: Initiates Google OAuth2 login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Google Auth
      tags:
      - Auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user and return user details and token.
      parameters:
      - description: User login data
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User login successful
          schema:
            $ref: '#/definitions/dto.UserLoginResponse'
        "400":
          description: Bad request, validation errors
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error, database or service errors
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - Auth
  /v1/auth/logout:
    post:
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and assign roles if provided.
      parameters:
      - description: User registration data
        in: body
        name: registerDto
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registration successful
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request, validation errors
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error, database or service errors
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user with roles
      tags:
      - Auth
  /v1/roles:
    get:
      consumes:
      - application/json
      description: Get all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerAuth: []
      summary: GetAllRoles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Create Role Request
        in: body
        name: roleDto
        required: true
        schema:
          $ref: '#/definitions/dto.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      security:
      - BearerAuth: []
      summary: CreateRole
      tags:
      - Role
  /v1/users:
    get:
      description: This user route returns a simple JSON response
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: User Endpoint
      tags:
      - User
    post:
      description: This user route returns a simple JSON response
      parameters:
      - description: Create User Request
        in: body
        name: createUserDto
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: User Endpoint
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
